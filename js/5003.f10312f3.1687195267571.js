"use strict";(self.webpackChunkpolkaswap_exchange_web=self.webpackChunkpolkaswap_exchange_web||[]).push([[5003],{75003:function(e,t,s){s.r(t),s.d(t,{default:function(){return g}});var i=s(77057),o=s(70655),a=s(53545),n=s(8755),r=s(36930),l=s(82753),d=s(31840),c=s(32806),u=s(91487),h=s(67814),p=s(85530),m=s(80710),S=s(16546),w=s(74614),b=s(25108);let k=class extends((0,a.Wr)(n.tA.FormattedAmountMixin,n.tA.LoadingMixin,c.Z,u.Z,h.Z)){constructor(...e){super(...e),(0,i.Z)(this,"сhartsEnabled",void 0),(0,i.Z)(this,"networkFees",void 0),(0,i.Z)(this,"dexQuoteData",void 0),(0,i.Z)(this,"enabledAssets",void 0),(0,i.Z)(this,"isExchangeB",void 0),(0,i.Z)(this,"fromValue",void 0),(0,i.Z)(this,"toValue",void 0),(0,i.Z)(this,"xor",void 0),(0,i.Z)(this,"liquiditySource",void 0),(0,i.Z)(this,"chartsFlagEnabled",void 0),(0,i.Z)(this,"nodeIsConnected",void 0),(0,i.Z)(this,"chartsEnabled",void 0),(0,i.Z)(this,"isLoggedIn",void 0),(0,i.Z)(this,"tokenFrom",void 0),(0,i.Z)(this,"tokenTo",void 0),(0,i.Z)(this,"isAvailable",void 0),(0,i.Z)(this,"swapMarketAlgorithm",void 0),(0,i.Z)(this,"setChartsEnabled",void 0),(0,i.Z)(this,"setFromValue",void 0),(0,i.Z)(this,"setToValue",void 0),(0,i.Z)(this,"setAmountWithoutImpact",void 0),(0,i.Z)(this,"setExchangeB",void 0),(0,i.Z)(this,"setLiquidityProviderFee",void 0),(0,i.Z)(this,"setEnabledAssets",void 0),(0,i.Z)(this,"setRewards",void 0),(0,i.Z)(this,"setRoute",void 0),(0,i.Z)(this,"selectDexId",void 0),(0,i.Z)(this,"setTokenFromAddress",void 0),(0,i.Z)(this,"setTokenToAddress",void 0),(0,i.Z)(this,"switchTokens",void 0),(0,i.Z)(this,"reset",void 0),(0,i.Z)(this,"setSubscriptionPayload",void 0),(0,i.Z)(this,"resetBalanceSubscriptions",void 0),(0,i.Z)(this,"updateBalanceSubscriptions",void 0),(0,i.Z)(this,"delimiters",r.FPNumber.DELIMITERS_CONFIG),(0,i.Z)(this,"KnownSymbols",l.KnownSymbols),(0,i.Z)(this,"isTokenFromSelected",!1),(0,i.Z)(this,"showSettings",!1),(0,i.Z)(this,"showSelectTokenDialog",!1),(0,i.Z)(this,"showConfirmSwapDialog",!1),(0,i.Z)(this,"liquidityReservesSubscription",null),(0,i.Z)(this,"enabledAssetsSubscription",null),(0,i.Z)(this,"recountSwapValues",(0,p._1)(this.runRecountSwapValues,100))}handleLiquiditySourceChange(){this.subscribeOnSwapReserves()}updateConnectionSubsriptions(e){e?this.enableSwapSubscriptions():this.resetSwapSubscriptions()}get tokenFromSymbol(){return this.tokenFrom?.symbol??""}get areTokensSelected(){return!(!this.tokenFrom||!this.tokenTo)}get isZeroFromAmount(){return(0,p.yA)(this.fromValue)}get isZeroToAmount(){return(0,p.yA)(this.toValue)}get hasZeroAmount(){return this.isZeroFromAmount||this.isZeroToAmount}get areZeroAmounts(){return this.isZeroFromAmount&&this.isZeroToAmount}get fromFiatAmount(){return this.tokenFrom&&this.fromValue&&this.getFiatAmountByString(this.fromValue,this.tokenFrom)||S.m8}get toFiatAmount(){return this.tokenTo&&this.toValue&&this.getFiatAmountByString(this.toValue,this.tokenTo)||S.m8}get fiatDifference(){const e=new RegExp(`\\${r.FPNumber.DELIMITERS_CONFIG.thousand}`,"g"),t=new RegExp(`\\${r.FPNumber.DELIMITERS_CONFIG.decimal}`,"g"),s=s=>s.replace(e,"").replace(t,"."),i=s(this.fromFiatAmount),o=s(this.toFiatAmount);if((0,p.yA)(i)||(0,p.yA)(o))return"0";const a=new r.FPNumber(i);return new r.FPNumber(o).sub(a).div(a).mul(this.Hundred).toFixed(2)}get fiatDifferenceFormatted(){return this.formatStringValue(this.fiatDifference)}get isXorOutputSwap(){return this.tokenTo?.address===l.XOR.address}get isMaxSwapAvailable(){return!(!this.tokenFrom||!this.tokenTo)&&(this.isLoggedIn&&(0,p.oI)(this.areTokensSelected,this.tokenFrom,this.fromValue,this.networkFee,this.xor,!1,this.isXorOutputSwap))}get preparedForSwap(){return this.isLoggedIn&&this.areTokensSelected}get isInsufficientLiquidity(){return this.isAvailable&&this.preparedForSwap&&!this.areZeroAmounts&&this.hasZeroAmount}get isInsufficientBalance(){return!!this.tokenFrom&&(this.preparedForSwap&&(0,p.Vl)(this.tokenFrom,this.fromValue,this.networkFee))}get isInsufficientXorForFee(){const e=this.preparedForSwap&&(0,p.LG)(this.xor,this.networkFee,this.isXorOutputSwap);if(e||!this.isXorOutputSwap)return e;const t=this.getFPNumberFromCodec(this.xor.balance?.transferable??"0",this.xor.decimals),s=this.getFPNumberFromCodec(this.networkFee,this.xor.decimals).sub(t),i=this.getFPNumber(this.toValue,this.xor.decimals).sub(r.FPNumber.gt(s,this.Zero)?s:this.Zero);return r.FPNumber.lte(i,this.Zero)}get networkFee(){return this.networkFees[r.Operation.Swap]}get isConfirmSwapDisabled(){return!this.areTokensSelected||!this.isAvailable||this.areZeroAmounts||this.isInsufficientLiquidity||this.isInsufficientBalance||this.isInsufficientXorForFee}created(){this.withApi((async()=>{this.parseCurrentRoute(),this.tokenFrom&&this.tokenTo?this.updateRouteAfterSelectTokens(this.tokenFrom,this.tokenTo):this.isValidRoute&&this.firstRouteAddress&&this.secondRouteAddress?(await this.setTokenFromAddress(this.firstRouteAddress),await this.setTokenToAddress(this.secondRouteAddress)):this.tokenFrom||(await this.setTokenFromAddress(l.XOR.address),await this.setTokenToAddress()),this.enableSwapSubscriptions()}))}getTokenBalance(e){return(0,p.rh)(e)}resetFieldFrom(){this.setFromValue("")}resetFieldTo(){this.setToValue("")}handleInputFieldFrom(e){this.areTokensSelected&&!(0,p.yA)(e)||this.resetFieldTo(),e!==this.fromValue&&(this.setFromValue(e),this.recountSwapValues())}handleInputFieldTo(e){this.areTokensSelected&&!(0,p.yA)(e)||this.resetFieldFrom(),e!==this.toValue&&(this.setToValue(e),this.recountSwapValues())}runRecountSwapValues(){const e=this.isExchangeB?this.toValue:this.fromValue;if(!this.areTokensSelected||(0,p.yA)(e))return;const t=this.isExchangeB?this.setFromValue:this.setToValue,s=this.isExchangeB?this.resetFieldFrom:this.resetFieldTo,i=this.isExchangeB?this.tokenFrom:this.tokenTo,o=n.hi.dex.dexList;try{const s=o.reduce(((t,{dexId:s})=>({...t,[s]:n.hi.swap.getResult(this.tokenFrom,this.tokenTo,e,this.isExchangeB,[this.liquiditySource].filter(Boolean),this.enabledAssets,this.dexQuoteData[s].paths,this.dexQuoteData[s].payload,s)})),{});let a=d.DexId.XOR;for(const e in s){const t=r.FPNumber.fromCodecValue(s[e].amount),i=r.FPNumber.fromCodecValue(s[a].amount);t.isZero()||(r.FPNumber.isLessThan(t,i)&&this.isExchangeB||r.FPNumber.isLessThan(i,t)&&!this.isExchangeB)&&(a=+e)}const{amount:l,amountWithoutImpact:c,fee:u,rewards:h,route:p}=s[a];t(this.getStringFromCodec(l,i.decimals)),this.setAmountWithoutImpact(c),this.setLiquidityProviderFee(u),this.setRewards(h),this.setRoute(p),this.selectDexId(a)}catch(e){b.error(e),s()}}cleanEnabledAssetsSubscription(){this.enabledAssetsSubscription?.unsubscribe(),this.enabledAssetsSubscription=null}subscribeOnEnabledAssetsAndSwapReserves(){this.cleanEnabledAssetsSubscription(),this.enabledAssetsSubscription=n.hi.swap.subscribeOnPrimaryMarketsEnabledAssets().subscribe((e=>{this.setEnabledAssets(e),this.subscribeOnSwapReserves()}))}cleanSwapReservesSubscription(){this.liquidityReservesSubscription?.unsubscribe(),this.liquidityReservesSubscription=null}subscribeOnSwapReserves(){this.cleanSwapReservesSubscription(),this.areTokensSelected&&(this.loading=!0,this.liquidityReservesSubscription=n.hi.swap.subscribeOnAllDexesReserves(this.tokenFrom.address,this.tokenTo.address,this.enabledAssets,this.liquiditySource).subscribe((e=>{e.forEach((e=>this.setSubscriptionPayload(e))),this.runRecountSwapValues(),this.loading=!1})))}handleFocusField(e=!1){const t=e?this.isZeroToAmount:this.isZeroFromAmount,s=this.isExchangeB;this.setExchangeB(e),t&&(this.resetFieldFrom(),this.resetFieldTo()),s!==this.isExchangeB&&this.recountSwapValues()}async handleSwitchTokens(){this.areTokensSelected&&(await this.switchTokens(),this.updateRouteAfterSelectTokens(this.tokenFrom,this.tokenTo),this.runRecountSwapValues())}handleMaxValue(){if(!this.tokenFrom)return;this.setExchangeB(!1);const e=(0,p.MN)(this.tokenFrom,this.networkFee);this.handleInputFieldFrom(e)}handleConnectWallet(){m.ZP.push({name:S.sn.Wallet})}openSelectTokenDialog(e){this.isTokenFromSelected=e,this.showSelectTokenDialog=!0}async setData(e){await this.setTokenFromAddress(e.firstAddress),await this.setTokenToAddress(e.secondAddress),this.subscribeOnSwapReserves()}async handleSelectToken(e){e&&await this.withSelectAssetLoading((async()=>{this.isTokenFromSelected?await this.setTokenFromAddress(e.address):await this.setTokenToAddress(e.address),this.subscribeOnSwapReserves()})),this.updateRouteAfterSelectTokens(this.tokenFrom,this.tokenTo)}handleConfirmSwap(){this.showConfirmSwapDialog=!0}async confirmSwap(e){e&&(this.resetFieldFrom(),this.resetFieldTo(),this.setExchangeB(!1))}openSettingsDialog(){this.showSettings=!0}toggleChart(){this.setChartsEnabled(!this.chartsEnabled)}enableSwapSubscriptions(){this.updateBalanceSubscriptions(),this.subscribeOnEnabledAssetsAndSwapReserves()}resetSwapSubscriptions(){this.resetBalanceSubscriptions(),this.cleanEnabledAssetsSubscription(),this.cleanSwapReservesSubscription()}beforeDestroy(){this.resetSwapSubscriptions()}destroyed(){this.reset()}};(0,o.__decorate)([w.SB.settings["сhartsEnabled"]],k.prototype,"сhartsEnabled",void 0),(0,o.__decorate)([w.SB.wallet.settings.networkFees],k.prototype,"networkFees",void 0),(0,o.__decorate)([w.SB.swap.dexQuoteData],k.prototype,"dexQuoteData",void 0),(0,o.__decorate)([w.SB.swap.enabledAssets],k.prototype,"enabledAssets",void 0),(0,o.__decorate)([w.SB.swap.isExchangeB],k.prototype,"isExchangeB",void 0),(0,o.__decorate)([w.SB.swap.fromValue],k.prototype,"fromValue",void 0),(0,o.__decorate)([w.SB.swap.toValue],k.prototype,"toValue",void 0),(0,o.__decorate)([w.Yn.assets.xor],k.prototype,"xor",void 0),(0,o.__decorate)([w.Yn.swap.swapLiquiditySource],k.prototype,"liquiditySource",void 0),(0,o.__decorate)([w.Yn.settings.chartsFlagEnabled],k.prototype,"chartsFlagEnabled",void 0),(0,o.__decorate)([w.Yn.settings.nodeIsConnected],k.prototype,"nodeIsConnected",void 0),(0,o.__decorate)([w.Yn.settings.chartsEnabled],k.prototype,"chartsEnabled",void 0),(0,o.__decorate)([w.Yn.wallet.account.isLoggedIn],k.prototype,"isLoggedIn",void 0),(0,o.__decorate)([w.Yn.swap.tokenFrom],k.prototype,"tokenFrom",void 0),(0,o.__decorate)([w.Yn.swap.tokenTo],k.prototype,"tokenTo",void 0),(0,o.__decorate)([w.Yn.swap.isAvailable],k.prototype,"isAvailable",void 0),(0,o.__decorate)([w.Yn.swap.swapMarketAlgorithm],k.prototype,"swapMarketAlgorithm",void 0),(0,o.__decorate)([w.QF.settings.setChartsEnabled],k.prototype,"setChartsEnabled",void 0),(0,o.__decorate)([w.QF.swap.setFromValue],k.prototype,"setFromValue",void 0),(0,o.__decorate)([w.QF.swap.setToValue],k.prototype,"setToValue",void 0),(0,o.__decorate)([w.QF.swap.setAmountWithoutImpact],k.prototype,"setAmountWithoutImpact",void 0),(0,o.__decorate)([w.QF.swap.setExchangeB],k.prototype,"setExchangeB",void 0),(0,o.__decorate)([w.QF.swap.setLiquidityProviderFee],k.prototype,"setLiquidityProviderFee",void 0),(0,o.__decorate)([w.QF.swap.setPrimaryMarketsEnabledAssets],k.prototype,"setEnabledAssets",void 0),(0,o.__decorate)([w.QF.swap.setRewards],k.prototype,"setRewards",void 0),(0,o.__decorate)([w.QF.swap.setRoute],k.prototype,"setRoute",void 0),(0,o.__decorate)([w.QF.swap.selectDexId],k.prototype,"selectDexId",void 0),(0,o.__decorate)([w.aD.swap.setTokenFromAddress],k.prototype,"setTokenFromAddress",void 0),(0,o.__decorate)([w.aD.swap.setTokenToAddress],k.prototype,"setTokenToAddress",void 0),(0,o.__decorate)([w.aD.swap.switchTokens],k.prototype,"switchTokens",void 0),(0,o.__decorate)([w.aD.swap.reset],k.prototype,"reset",void 0),(0,o.__decorate)([w.aD.swap.setSubscriptionPayload],k.prototype,"setSubscriptionPayload",void 0),(0,o.__decorate)([w.aD.swap.resetSubscriptions],k.prototype,"resetBalanceSubscriptions",void 0),(0,o.__decorate)([w.aD.swap.updateSubscriptions],k.prototype,"updateBalanceSubscriptions",void 0),(0,o.__decorate)([(0,a.RL)("liquiditySource")],k.prototype,"handleLiquiditySourceChange",null),(0,o.__decorate)([(0,a.RL)("nodeIsConnected")],k.prototype,"updateConnectionSubsriptions",null),k=(0,o.__decorate)([(0,a.wA)({components:{SwapSettings:(0,m.kF)(S.z8.SwapSettings),SwapConfirm:(0,m.kF)(S.z8.SwapConfirm),SwapStatusActionBadge:(0,m.kF)(S.z8.SwapStatusActionBadge),SwapTransactionDetails:(0,m.kF)(S.z8.SwapTransactionDetails),SwapChart:(0,m.kF)(S.z8.SwapChart),GenericPageHeader:(0,m.kF)(S.z8.GenericPageHeader),SlippageTolerance:(0,m.kF)(S.z8.SlippageTolerance),SelectToken:(0,m.kF)(S.z8.SelectToken),TokenInput:(0,m.kF)(S.z8.TokenInput),ValueStatusWrapper:(0,m.kF)(S.z8.ValueStatusWrapper),SvgIconButton:(0,m.kF)(S.z8.SvgIconButton),FormattedAmount:n.wx.FormattedAmount}})],k);var F=k,g=(0,s(1001).Z)(F,(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"swap-container"},[s("s-form",{directives:[{name:"loading",rawName:"v-loading",value:e.parentLoading,expression:"parentLoading"}],staticClass:"container container--swap el-form--actions",attrs:{"show-message":!1}},[s("generic-page-header",{staticClass:"page-header--swap",attrs:{title:e.t("exchange.Swap")}},[s("div",{staticClass:"swap-settings-buttons"},[s("swap-status-action-badge",{scopedSlots:e._u([{key:"label",fn:function(){return[e._v(e._s(e.t("marketText"))+":")]},proxy:!0},{key:"value",fn:function(){return[e._v(e._s(e.swapMarketAlgorithm))]},proxy:!0},{key:"action",fn:function(){return[s("s-button",{staticClass:"el-button--settings",attrs:{type:"action",icon:"basic-settings-24"},on:{click:e.openSettingsDialog}})]},proxy:!0}])}),e.chartsFlagEnabled?s("svg-icon-button",{attrs:{icon:"line-icon",size:"medium",tooltip:e.t("dexSettings.сhartsDescription"),active:e.chartsEnabled},on:{click:e.toggleChart}}):e._e()],1)]),s("token-input",{attrs:{"is-select-available":"",balance:e.getTokenBalance(e.tokenFrom),"is-max-available":e.isMaxSwapAvailable,title:e.t("transfers.from"),token:e.tokenFrom,value:e.fromValue},on:{input:e.handleInputFieldFrom,focus:function(t){return e.handleFocusField(!1)},max:e.handleMaxValue,select:function(t){return e.openSelectTokenDialog(!0)}},scopedSlots:e._u([e.areTokensSelected&&!e.isZeroToAmount&&e.isExchangeB?{key:"title-append",fn:function(){return[s("span",{staticClass:"input-title--uppercase input-title--primary"},[e._v(" ("+e._s(e.t("swap.estimated"))+") ")])]},proxy:!0}:null],null,!0)}),s("s-button",{staticClass:"el-button--switch-tokens",attrs:{type:"action",icon:"arrows-swap-90-24",disabled:!e.areTokensSelected},on:{click:e.handleSwitchTokens}}),s("token-input",{attrs:{"is-select-available":"",balance:e.getTokenBalance(e.tokenTo),title:e.t("transfers.to"),token:e.tokenTo,value:e.toValue},on:{input:e.handleInputFieldTo,focus:function(t){return e.handleFocusField(!0)},select:function(t){return e.openSelectTokenDialog(!1)}},scopedSlots:e._u([!e.areTokensSelected||e.isZeroFromAmount||e.isExchangeB?null:{key:"title-append",fn:function(){return[s("span",{staticClass:"input-title--uppercase input-title--primary"},[e._v(" ("+e._s(e.t("swap.estimated"))+") ")])]},proxy:!0},e.tokenTo?{key:"fiat-amount-append",fn:function(){return[s("value-status-wrapper",{staticClass:"price-difference__value",attrs:{value:e.fiatDifference}},[e._v(" ("),s("formatted-amount",{attrs:{value:e.fiatDifferenceFormatted}},[e._v("%")]),e._v(") ")],1)]},proxy:!0}:null],null,!0)}),s("slippage-tolerance",{staticClass:"slippage-tolerance-settings"}),e.isLoggedIn?s("s-button",{staticClass:"action-button s-typography-button--large",attrs:{type:"primary",disabled:e.isConfirmSwapDisabled,loading:e.loading||e.isSelectAssetLoading},on:{click:e.handleConfirmSwap}},[e.areTokensSelected?e.isAvailable?e.areZeroAmounts?[e._v(" "+e._s(e.t("buttons.enterAmount"))+" ")]:e.isInsufficientLiquidity?[e._v(" "+e._s(e.t("swap.insufficientLiquidity"))+" ")]:e.isInsufficientBalance?[e._v(" "+e._s(e.t("exchange.insufficientBalance",{tokenSymbol:e.tokenFromSymbol}))+" ")]:e.isInsufficientXorForFee?[e._v(" "+e._s(e.t("exchange.insufficientBalance",{tokenSymbol:e.KnownSymbols.XOR}))+" ")]:[e._v(" "+e._s(e.t("exchange.Swap"))+" ")]:[e._v(" "+e._s(e.t("swap.pairIsNotCreated"))+" ")]:[e._v(" "+e._s(e.t("buttons.chooseTokens"))+" ")]],2):s("s-button",{staticClass:"action-button s-typography-button--large",attrs:{type:"primary"},on:{click:e.handleConnectWallet}},[e._v(" "+e._s(e.t("swap.connectWallet"))+" ")]),e.areTokensSelected&&!e.hasZeroAmount?s("swap-transaction-details",{staticClass:"info-line-container",attrs:{"info-only":!1}}):e._e(),s("select-token",{attrs:{visible:e.showSelectTokenDialog,connected:e.isLoggedIn,asset:e.isTokenFromSelected?e.tokenTo:e.tokenFrom},on:{"update:visible":function(t){e.showSelectTokenDialog=t},select:e.handleSelectToken}}),s("swap-confirm",{attrs:{visible:e.showConfirmSwapDialog,isInsufficientBalance:e.isInsufficientBalance},on:{"update:visible":function(t){e.showConfirmSwapDialog=t},confirm:e.confirmSwap}}),s("swap-settings",{attrs:{visible:e.showSettings},on:{"update:visible":function(t){e.showSettings=t}}})],1),e.chartsEnabled?s("swap-chart",{staticClass:"swap-chart",attrs:{"token-from":e.tokenFrom,"token-to":e.tokenTo,"is-available":e.isAvailable}}):e._e()],1)}),[],!1,null,"153e292e",null).exports}}]);